
APP_USER=app-$(APP)
APP_HOME=/home/$(APP_USER)/

SSH_HOME=$(APP_HOME).ssh/

SSH_A=/var/lib/ikari/keys/$(APP_USER)
SSH_A_PUB=$(SSH_A).pub

SSH_H=$(SSH_HOME)id_rsa
SSH_H_PUB=$(SSH_H).pub

NGINX_CONF=/etc/nginx/sites-enabled/$(APP_USER)

# targets
#########

RE=make -f $(ME) APP=$(APP) ME=$(ME) -s

# SSH
$(SSH_A):
	ssh-keygen -f $@ -N ""

ssh_a:
	sudo $(RE) $(SSH_A)

$(SSH_H): $(SSH_A)
	[ -d $(SSH_HOME) ] || mkdir $(SSH_HOME)
	cp $(SSH_A) $(SSH_H)
	cp $(SSH_A_PUB) $(SSH_H_PUB)
	chown $(APP_USER) -R $(SSH_HOME)	

ssh_h:
	if [ -d $(APP_HOME) ] ;then sudo $(RE) $(SSH_H) ; fi

setup_key: ssh_a ssh_h

update_code_in:
	sh -c 'cd $(APP_HOME)/serve && \
	    (git reset --hard ; \
	    git pull --rebase )'

update_code:
	sudo -u $(APP_USER) $(RE) update_code_in

setup_venv:
	$(APP_HOME)/serve/env/bin/pip install -r requirements.txt --upgrade


$(APP_HOME)/serve/env/bin/buildout:
	$(APP_HOME)/serve/env/bin/pip install zc.buildout

$(APP_HOME)/serve/env/bin/python:
	virtualenv $(APP_HOME)/serve/env

setup_buildout:
	env DONT_PATCH_SETUPTOOLS=y buildout2.7

setup_repo_in: $(APP_HOME)/serve/env/bin/python
	if [ -f $(APP_HOME)/serve/buildout.cfg ]; then\
	     $(RE) setup_buildout ; \
	fi
	if [ -f $(APP_HOME)/serve/requirements.txt ];then\
	   $(RE) setup_venv ; \
	fi

setup_repo:
	sh -c 'cd $(APP_HOME)/serve && \
	    sudo -u $(APP_USER) $(RE) setup_repo_in'

$(APP_HOME)/serve:
	sudo -u $(APP_USER) $(RE) URL=$(URL) app_home_serve

app_home_serve:
	git clone $(URL) $(APP_HOME)/serve

app_clean_in:
	rm -rf $(APP_HOME)/serve $(APP_HOME)/uwsgi.ini  $(SSH_HOME)

app_clean:
	sudo -u $(APP_USER) $(RE) app_clean_in
	sudo rm -f $(NGINX_CONF)

clone_code: $(APP_HOME)/serve

create_user:
	id $(APP_USER) || sudo useradd $(APP_USER) --create-home

nginx_reload:
	sudo /etc/init.d/nginx reload'

fetch_key:
	cat $(SSH_A_PUB)

fetch_rev_in:
	sh -c 'cd $(APP_HOME)/serve && \
	    git log -n 1 --format="%h %s"'

fetch_rev:
	sudo -u $(APP_USER) $(RE) fetch_rev_in

fetch_status:
	nc -U /var/run/emperor.sock

fetch_status_app:
	nc -U /tmp/$(APP_USER).stats.sock

fetch_uid:
	id -u $(APP_USER)

fetch_http_root:
	if [ -L $(APP_HOME)/serve/http_root ]; then \
	    readlink $(APP_HOME)/serve/http_root ; \
	fi

# hooks

hook-post-setup:
	if [ -e $(APP_HOME)/serve/Makefile.ikari ]; then \
	    sh -c 'cd $(APP_HOME)/serve && sudo -H -u $(APP_USER) make -f Makefile.ikari setup' ; \
	fi
